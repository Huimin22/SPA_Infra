name: Build and Deploy SPA

on:
  # schedule:
  #   - cron: 0 0 * * * 
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Infra Repository
        uses: actions/checkout@v4
        with:
          repository: Huimin22/SPA_Infra
          path: infra
        
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: Huimin22/SPA_APP
          path: spapath
          
      - name: Set Up Environment File
        run: |
          cp spapath/.env.local spapath/.env

      # - name: Build Images
      #   run: |
      #     cd spapath
      #     docker compose up -d
      #     docker images
      #     sleep 20

      - name: Authenticate AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Configure SSH Access
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > devop.pem
          chmod 400 devop.pem
      
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Upload Images to ECR
      #   run: |
      #     chmod +x infra/scripts/upload_images.sh
      #     ./infra/scripts/upload_images.sh
        
      - name: Launch Temp EC2 Instance
        run: |
          chmod +x infra/scripts/launch_temp_ec2.sh
          ./infra/scripts/launch_temp_ec2.sh
          
      - name: Get Temp Instance ID
        id: get_instance_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].InstanceId' --output text)
          echo "Temp INSTANCE_ID=$INSTANCE_ID"

      - name: Get EC2 Public DNS and Upload Config
        run: |
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)

            echo "PUBLIC_DNS=$PUBLIC_DNS" >> $GITHUB_ENV
            echo "Public DNS: $PUBLIC_DNS"
            scp -i devop.pem -o StrictHostKeyChecking=no spapath/docker-compose-temp.yml ec2-user@$PUBLIC_DNS:~/
            
      - name: Execute Tests on Temp EC2
        run: |
          ssh -i devop.pem -o StrictHostKeyChecking=no ec2-user@$PUBLIC_DNS << EOF
            sudo yum install -y docker
            sudo service docker start
            sudo chkconfig docker on
            sudo usermod -aG docker ec2-user
            sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            newgrp docker
            docker --version
            docker-compose version

            export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_REGION=${{ env.AWS_REGION }}

            aws ecr get-login-password --region \$AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.\$AWS_REGION.amazonaws.com
            docker-compose -f docker-compose-temp.yml up -d
            sleep 10

            echo "Running smoke test..."
            curl -o /dev/null -s -w "%{http_code}\n" http://localhost:3000/ | grep -q 200 || exit 1
          EOF

      # - name: Deploy Latest Version to QA EC2
      #   if: success()
      #   run: |
      #     echo "Smoke test passed!"
      #     ssh -i devop.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.QA_EC2_PUBLIC_DNS }} << EOF
      #       sudo yum install -y docker
      #       sudo service docker start
      #       sudo chkconfig docker on
      #       sudo usermod -aG docker ec2-user
      #       sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
      #       sudo chmod +x /usr/local/bin/docker-compose
      #       newgrp docker
      #       docker --version
      #       docker-compose version
            
      #       export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
      #       export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #       export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
      #       export AWS_REGION=${{ env.AWS_REGION }}

      #       export DB_HOST="localdb.cvp0oraj48yg.us-east-1.rds.amazonaws.com"
      #       export DB_USER="admin"
      #       export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
      #       export DB_NAME="food_db"

      #       aws ecr get-login-password --region \$AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.\$AWS_REGION.amazonaws.com
      #       docker-compose -f docker-compose-qa.yml pull
      #       docker-compose down
      #       docker-compose -f docker-compose-qa.yml up -d
      #       docker image prune -f
      #     EOF
      
      # - name: Clean Up Unused Images
      #   if: failure()
      #   run: |
      #     echo "Smoke test failed. Delete Docker images in ECR..."
          
      #     PRE_FRONTEND_IMAGE_TAG=$(aws ecr list-images --repository-name appfrontend \
      #       --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '2p')
      #     PRE_BACKEND_IMAGE_TAG=$(aws ecr list-images --repository-name appbackend \
      #       --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '2p')
          
      #     aws ecr batch-delete-image --repository-name appfrontend --image-ids imageTag=${{ env.TIMESTAMP }}
      #     aws ecr batch-delete-image --repository-name appfrontend --image-ids imageTag=latest
      #     aws ecr batch-delete-image --repository-name appbackend --image-ids imageTag=${{ env.TIMESTAMP }}
      #     aws ecr batch-delete-image --repository-name appbackend --image-ids imageTag=latest

      #     if [ -z "$PRE_FRONTEND_IMAGE_TAG" ]; then
      #       echo "No previous frontend images found."
      #       exit 1
      #     fi
          
      #     if [ -z "$PRE_BACKEND_IMAGE_TAG" ]; then
      #       echo "No previous backend images found."
      #       exit 1
      #     fi

      #     echo "Previous frontend image found: $PRE_FRONTEND_IMAGE_TAG"
      #     echo "Previous backend image found: $PRE_BACKEND_IMAGE_TAG"
          
      #     # Save the image manifest to a file for security
      #     FRONTEND_MANIFEST=$(aws ecr batch-get-image --repository-name appfrontend --image-ids imageTag="$PRE_FRONTEND_IMAGE_TAG" --output text --query 'images[].imageManifest')
      #     BACKEND_MANIFEST=$(aws ecr batch-get-image --repository-name appbackend --image-ids imageTag="$PRE_BACKEND_IMAGE_TAG" --output text --query 'images[].imageManifest')

      #     # Retag
      #     aws ecr put-image --repository-name appfrontend --image-tag ${{ env.IMAGE_TAG }} --image-manifest "$FRONTEND_MANIFEST"
      #     aws ecr put-image --repository-name appbackend --image-tag ${{ env.IMAGE_TAG }} --image-manifest "$BACKEND_MANIFEST"


      - name: Remove Temp EC2 Server
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
